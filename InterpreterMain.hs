-- automatically generated by BNF Converter
-- modified by Andrzej Jackowski (aj334557)
module Main where

import System.IO
import System.Environment ( getArgs, getProgName )

import Lexgrammar
import Pargrammar
import Skelgrammar
import Printgrammar
import Absgrammar
import ErrM

import Interpreter

type ParseFun a = [Token] -> Err a

myLLexer = myLexer
type Verbosity = Int

--runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = readFile f >>= run v p

--run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do hPutStrLn stderr "-- Parse failed ---"
                          hPutStrLn stderr s
           Ok  tree -> do case execProg tree of
                            Bad s -> do hPutStrLn stderr "-- Runtime Error --"
                                        hPutStrLn stderr s
                            Ok result -> putStr $ printProgram (snd result) 

main :: IO ()
main = do args <- getArgs
          case args of
            [] -> hGetContents stdin >>= run 2 pProgram
            "-s":fs -> mapM_ (runFile 0 pProgram) fs
            fs -> mapM_ (runFile 2 pProgram) fs
