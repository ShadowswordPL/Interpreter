module Skelgrammar where

-- Haskell module generated by the BNF converter

import Absgrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog instrset  -> failure x


transInstrSet :: InstrSet -> Result
transInstrSet x = case x of
  ISetOne instr  -> failure x
  ISetMore instr instrset  -> failure x


transInstr :: Instr -> Result
transInstr x = case x of
  IDeclr declr  -> failure x
  IInstrM instrm  -> failure x
  IInstrU stmtunmatch  -> failure x


transInstrM :: InstrM -> Result
transInstrM x = case x of
  IInstrSemico stmtsemico  -> failure x
  IInstrNoSemico stmtnosemico  -> failure x
  ICurlyBracket instrset  -> failure x


transType :: Type -> Result
transType x = case x of
  TInt  -> failure x
  TBool  -> failure x


transDeclr :: Declr -> Result
transDeclr x = case x of
  DVar type' id exp  -> failure x
  DFun type' id args instr  -> failure x


transArgs :: Args -> Result
transArgs x = case x of
  Args0  -> failure x
  Args1 arg  -> failure x
  Args arg args  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  Arg type' id  -> failure x
  ArgRef type' id  -> failure x


transStmtUnmatch :: StmtUnmatch -> Result
transStmtUnmatch x = case x of
  SIf exp instr  -> failure x
  SIfEU exp instrm stmtunmatch  -> failure x
  SWhileU exp stmtunmatch  -> failure x
  SForStmtU stmtsemico1 exp2 stmtsemico3 stmtunmatch4  -> failure x
  SForU declr exp stmtsemico stmtunmatch  -> failure x


transStmtNoSemico :: StmtNoSemico -> Result
transStmtNoSemico x = case x of
  SIfE exp instrm1 instrm2  -> failure x
  SWhile exp instrm  -> failure x
  SForStmt stmtsemico1 exp2 stmtsemico3 instrm4  -> failure x
  SFor declr exp stmtsemico instrm  -> failure x


transStmtSemico :: StmtSemico -> Result
transStmtSemico x = case x of
  SSkip  -> failure x
  SAssign id exp  -> failure x
  SPrint exp  -> failure x
  SReturn exp  -> failure x
  SExp exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  EInt n  -> failure x
  BOr exp1 exp2  -> failure x
  BAnd exp1 exp2  -> failure x
  BNeg exp  -> failure x
  BTrue  -> failure x
  BFalse  -> failure x
  ELess exp1 exp2  -> failure x
  EMore exp1 exp2  -> failure x
  EEq exp1 exp2  -> failure x
  ENeq exp1 exp2  -> failure x
  EVar id  -> failure x
  EFunc id callargs  -> failure x


transCallArgs :: CallArgs -> Result
transCallArgs x = case x of
  CallArgs0  -> failure x
  CallArgs1 callarg  -> failure x
  CallArgs callarg callargs  -> failure x


transCallArg :: CallArg -> Result
transCallArg x = case x of
  CallArg exp  -> failure x



